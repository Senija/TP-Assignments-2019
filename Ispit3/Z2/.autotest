{
    "id": 5723,
    "name": "Tehnike programiranja (2019\/2020), Ispit 3, Zadatak 2",
    "language": "C++",
    "preferred_compiler": "g++",
    "required_compiler": "g++",
    "compiler_features": [],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "profile": "true",
    "debug": "true",
    "test": "true",
    "compile": "true",
    "run": "false",
    "test_specifications": [
        {
            "id": 31,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "    std::cout << \"AT1\" << std::endl;\n    {\n        \/\/AT1 - test konstruktora klase Grad (trivijalne vrijednosti)\n        Grad g1(\"Tuzla\", 130000);\n        Grad g2(\"Bihac\", 50000);\n        Grad g3(\"Sarajevo\", 350000);\n        Grad g4(\"Mostar\", 100000);\n        Grad g5(\"Ovo je neki grad sa tacno cetrdeset i devet slova\", 15);\n        \n        const char ime[50] = \"Zenica\";\n        int stanovnici = 115000;\n        Grad g6(ime, stanovnici);\n        std::cout << \"OK\" << std::endl;\n    }\n\n    std::cout << \"AT2\" << std::endl;\n    {\n        \/\/AT2 - test konstruktora klase Grad (izuzeci)\n        try\n        {\n            Grad g(\"Ovo je neki grad sa ultra dugim imenom kako bi se testiralo bacanje izuzetka\", 15);\n            std::cout << \"Ovo se ne smije ispisati!\" << std::endl;\n        } \n        catch (std::domain_error e)\n        {\n            std::cout << e.what() << std::endl;\n        }\n        catch (...)\n        {\n            std::cout << \"Pogresan izuzetak!\" << std::endl;\n        }\n        \n        try\n        {\n            Grad g(\"Grad sa negativnim brojem stanovnika\", -15);\n            std::cout << \"Ovo se ne smije ispisati!\" << std::endl;\n        } \n        catch (std::domain_error e)\n        {\n            std::cout << e.what() << std::endl;\n        }\n        catch (...)\n        {\n            std::cout << \"Pogresan izuzetak!\" << std::endl;\n        }\n    }\n\n    std::cout << \"AT3\" << std::endl;\n    {\n        \/\/AT3 - test konstruktora klase Grad (izuzeci)    \n        \n        \n        try\n        {\n            Grad g(\"Grad bez ljudi, Severina, 2011.g\", 0);\n            std::cout << \"Ovo se ne smije ispisati!\" << std::endl;\n        } \n        catch (std::domain_error e)\n        {\n            std::cout << e.what() << std::endl;\n        }\n        catch (...)\n        {\n            std::cout << \"Pogresan izuzetak!\" << std::endl;\n        }\n        \n        try\n        {\n            Grad g(\"Ovo je neki grad sa tacno pedeset znakova u imenu.\", 15);\n            std::cout << \"Ovo se ne smije ispisati!\" << std::endl;\n        } \n        catch (std::domain_error e)\n        {\n            std::cout << e.what() << std::endl;\n        }\n        catch (...)\n        {\n            std::cout << \"Pogresan izuzetak!\" << std::endl;\n        }\n    }\n\n    std::cout << \"AT4\" << std::endl;\n    {\n        \/\/AT4 - testiranje pristupne funkcije \u010dlanice DajIme\n        Grad g1(\"Tuzla\", 130000);\n        const Grad& g2(g1);\n        const char* p = g1.DajIme();\n        p = g2.DajIme();\n        std::cout << p << \" \" << g1.DajIme() << \" \" << g2.DajIme() << std::endl;\n    }\n\n        std::cout << \"AT5\" << std::endl;\n    {\n        \/\/AT5 - testiranje pristupnih funkcija \u010dlanica DajBrojStanovnika\n        Grad g1(\"Tuzla\", 130000);\n        const Grad& g2(g1);\n        int broj1 = g1.DajBrojStanovnika(), broj2 = g2.DajBrojStanovnika();\n        std::cout << broj1 << \" \" << broj2 << \" \" << g1.DajBrojStanovnika() << \" \" << g2.DajBrojStanovnika() << \" \" << std::endl;\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "AT1\\nOK\\nAT2\\nNeispravni podaci\\nNeispravni podaci\\nAT3\\nNeispravni podaci\\nNeispravni podaci\\nAT4\\nTuzla Tuzla Tuzla\\nAT5\\n130000 130000 130000 130000 \\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "true",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 32,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "    std::cout << \"AT6\" << std::endl;\n    {\n        \/\/AT6 - testiranje konstruktora klase Gradovi (potrebno je samo da se kompajlira)\n        Gradovi g;\n        std::cout << \"OK\" << std::endl;\n    }\n        std::cout << \"AT7\" << std::endl;\n    {\n        \/\/AT7 - testiranje funkcija \u010dlanica DodajGrad, ObrisiGrad, DajBrojGradova\n        Gradovi g;\n        std::cout << g.DajBrojGradova() << \" \";\n        g.DodajGrad(\"Tuzla\", 130000);\n        std::cout << g.DajBrojGradova() << \" \";\n        g.ObrisiGrad(\"Tuzla\");\n        std::cout << g.DajBrojGradova() << \" \";\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        std::cout << g.DajBrojGradova() << \" \";\n        g.ObrisiGrad(\"Mostar\");\n        std::cout << g.DajBrojGradova();\n    }\n\n        std::cout << \"AT8\" << std::endl;\n    {\n        \/\/AT8 - testiranje funkcija \u010dlanica DodajGrad, ObrisiGrad, Ispisi\n        Gradovi g;\n        g.Ispisi();\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.Ispisi();\n        g.ObrisiGrad(\"Tuzla\");\n        g.Ispisi();\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        g.Ispisi();\n        g.ObrisiGrad(\"Mostar\");\n        g.Ispisi();\n    }\n\n        std::cout << \"AT10\" << std::endl;\n    {\n        \/\/AT10 - testiranje funkcije \u010dlanice DodajGrad za izuzetkom\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        \n        try\n        {\n            g.DodajGrad(\"Tuzla\", 130000);\n            std::cout << \"Ovo se ne smije ispisati!\";\n        } \n        catch (std::domain_error e)\n        {\n            std::cout << e.what() << std::endl;\n        }\n        catch (...)\n        {\n            std::cout << \"Pogresan izuzetak!\" << std::endl;\n        }\n    }\n\n        std::cout << \"AT11\" << std::endl;\n    {\n        \/\/AT11 - testiranje funkcije \u010dlanice DodajGrad i ObrisiGrad sa nepostojecim gradom\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.ObrisiGrad(\"Tuzl\");\n        g.Ispisi();\n    }\n\n        std::cout << \"AT19\" << std::endl;\n    {\n        \/\/AT19 - da li je metoda Ispisi const\n        const Gradovi g;\n        std::cout << \".\";\n        g.Ispisi();\n        std::cout << \".\";\n    }\n\n        std::cout << \"AT16\" << std::endl;\n    {\n        \/\/AT16 - testiranje metode SortirajGradove\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        g.DodajGrad(\"Zenica\", 113000);\n        g.DodajGrad(\"Banja Luka\", 200000);\n        g.SortirajGradove();\n        g.Ispisi();\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "AT6\\nOK\\nAT7\\n0 1 0 3 2\\nAT8\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nBihac: 50000\\nSarajevo: 350000\\nAT10\\nGrad vec postoji\\nAT11\\nTuzla: 130000\\nAT19\\n..\\nAT16\\nSarajevo: 350000\\nBanja Luka: 200000\\nTuzla: 130000\\nZenica: 113000\\nMostar: 100000\\nBihac: 50000\\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "true",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 33,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "    std::cout << \"AT12\" << std::endl;\n    {\n        \/\/AT12 - testiranje preklopljenog operatora []\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        g.DodajGrad(\"Zenica\", 113000);\n        std::cout << \"Tuzla: \" << g[\"Tuzla\"] << std::endl << \n                     \"Bihac: \" << g[\"Bihac\"] << std::endl << \n                     \"Sarajevo: \" << g[\"Sarajevo\"] << std::endl << \n                     \"Zenica: \" << g[\"Zenica\"] << std::endl;\n    }\n\n        std::cout << \"AT13\" << std::endl;\n    {\n        \/\/AT13 - testiranje preklopljenog operatora [] sa izuzecima\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.ObrisiGrad(\"Tuzla\");\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        \n        try\n        {\n          std::cout << g[\"Tuzla\"];\n          std::cout << \"Ovo se ne smije ispisati\";\n        }\n        catch(std::range_error e)\n        {\n          std::cout << e.what() << std::endl;\n        }\n        catch(...)\n        {\n          std::cout << \"Pogre\u0161an izuzetak\";\n        }\n        \n        std::cout << \"Bihac: \" << g[\"Bihac\"] << std::endl;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.ObrisiGrad(\"Bihac\");\n        \n        std::cout << \"Tuzla: \" << g[\"Tuzla\"] << std::endl;\n        \n        try\n        {\n          std::cout << g[\"Bihac\"];\n          std::cout << \"Ovo se ne smije ispisati\";\n        }\n        catch(std::range_error e)\n        {\n          std::cout << e.what() << std::endl;\n        }\n        catch(...)\n        {\n          std::cout << \"Pogre\u0161an izuzetak\";\n        }\n    }\n        std::cout << \"AT15\" << std::endl;\n    {\n        \/\/AT15 - testiranje preklopljenog operatora []\n            \/\/ kada se koristi sa lijeve strane znaka =\n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        g.DodajGrad(\"Zenica\", 113000);\n        g[\"Tuzla\"] = 130001;\n        g[\"Sarajevo\"] = 350001;\n        g[\"Mostar\"] = 100001;\n        \n        std::cout << \"Tuzla: \" << g[\"Tuzla\"] << std::endl << \n                     \"Bihac: \" << g[\"Bihac\"] << std::endl << \n                     \"Sarajevo: \" << g[\"Sarajevo\"] << std::endl << \n                     \"Zenica: \" << g[\"Zenica\"] << std::endl <<\n                     \"Mostar: \" << g[\"Mostar\"] << std::endl;\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "AT12\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nZenica: 113000\\nAT13\\nNepostojeci grad\\nBihac: 50000\\nTuzla: 130000\\nNepostojeci grad\\nAT15\\nTuzla: 130001\\nBihac: 50000\\nSarajevo: 350001\\nZenica: 113000\\nMostar: 100001\\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "true",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 34,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "    std::cout << \"AT17\" << std::endl;\n    {\n        \/\/AT17 - testiranje metoda SacuvajUBinarnuDatoteku i ObnoviIzBinarneDatoteke\n          \n        Gradovi g;\n        g.DodajGrad(\"Tuzla\", 130000);\n        g.DodajGrad(\"Bihac\", 50000);\n        g.DodajGrad(\"Sarajevo\", 350000);\n        g.DodajGrad(\"Mostar\", 100000);\n        g.SortirajGradove();\n        g.Ispisi();\n        g.SacuvajUBinarnuDatoteku(\"AT14.DAT\");\n        Gradovi g2;\n        g2.ObnoviIzBinarneDatoteke(\"AT14.DAT\");\n        g2.Ispisi();\n    }\n\n    std::cout << \"AT18\" << std::endl;\n    {\n        \/\/AT18 - testiranje metode ObnoviIzBinarneDatoteke sa izuzetkom\n          \n        Gradovi g2;\n        \n        try\n        {\n          g2.ObnoviIzBinarneDatoteke(\"AT15.DAT\");\n        }\n        catch(std::logic_error e)\n        {\n          std::cout << \"Izuzetak: \" << e.what() << std::endl;\n        }\n        catch(...)\n        {\n          std::cout << \"Pogre\u0161an izuzetak\";\n        }\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "AT17\\nSarajevo: 350000\\nTuzla: 130000\\nMostar: 100000\\nBihac: 50000\\nSarajevo: 350000\\nTuzla: 130000\\nMostar: 100000\\nBihac: 50000\\nAT18\\nIzuzetak: Greska pri citanju datoteke\\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "true",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 35,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "    std::cout << \"AT20\" << std::endl;\n    {\n        \/\/AT20 - test pomjerajuceg konstruktora kopije\n        Gradovi g1;\n        g1.DodajGrad(\"Tuzla\", 130000);\n        g1.DodajGrad(\"Bihac\", 50000);\n        g1.DodajGrad(\"Sarajevo\", 350000);\n        g1.DodajGrad(\"Mostar\", 100000);\n        g1.Ispisi();\n        Gradovi g2(std::move(g1));\n        g2.Ispisi();\n    }\n\n    std::cout << \"AT21\" << std::endl;\n    {\n        \/\/AT21 - test operatora dodjele\n        Gradovi g1;\n        g1.DodajGrad(\"Tuzla\", 130000);\n        g1.DodajGrad(\"Bihac\", 50000);\n        g1.DodajGrad(\"Sarajevo\", 350000);\n        g1.DodajGrad(\"Mostar\", 100000);\n        g1.Ispisi();\n        Gradovi g2 = std::move(g1);\n        g2.Ispisi();\n    }\n\n        std::cout << \"AT22\" << std::endl;\n    {\n        \/\/AT22 - test konstruktora kopije\n        Gradovi g1;\n        g1.DodajGrad(\"Tuzla\", 130000);\n        g1.DodajGrad(\"Bihac\", 50000);\n        g1.DodajGrad(\"Sarajevo\", 350000);\n        g1.DodajGrad(\"Mostar\", 100000);\n        g1.Ispisi();\n        Gradovi g2(g1);\n        g2.Ispisi();\n    }\n        std::cout << \"AT23\" << std::endl;\n    {\n        \/\/AT23 - test operatora dodjele\n        Gradovi g1;\n        g1.DodajGrad(\"Tuzla\", 130000);\n        g1.DodajGrad(\"Bihac\", 50000);\n        g1.DodajGrad(\"Sarajevo\", 350000);\n        g1.DodajGrad(\"Mostar\", 100000);\n        g1.Ispisi();\n        Gradovi g2;\n        g2 = g1;\n        g1.Ispisi();\n        g2.Ispisi();\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "AT20\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nAT21\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nAT22\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nAT23\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\nTuzla: 130000\\nBihac: 50000\\nSarajevo: 350000\\nMostar: 100000\\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "true",
            "regex": "false",
            "substring": "false"
        }
    ]
}